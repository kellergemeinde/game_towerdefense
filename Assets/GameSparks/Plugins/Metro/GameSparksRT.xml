<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameSparksRT</name>
    </assembly>
    <members>
        <member name="T:GameSparks.RT.IRTCommand">
            <summary>
            IRTCommand. THe interface that objects returned from OnCustom need to implement.
            Code within OnCustom runs in a background Thread, so for Engines like unity UI updates 
            cannot be performed in this method. 
            These returned objects are executed on calls to IRTSession.Update(), and are executed on the thread that calls this method.
            This pattern allows you to run code in both the background, and foreground threads when a custom message is received
            </summary>
        </member>
        <member name="M:GameSparks.RT.IRTCommand.Execute">
            <summary>
            Execute this instance. Executed on calls to IRTSession.Update()
            </summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.LoginCommand.Serialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.LoginCommand)">
            <summary>Serialize the instance into the stream</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.LoginCommand.SerializeLengthDelimited(System.IO.Stream,Com.Gamesparks.Realtime.Proto.LoginCommand)">
            <summary>Helper: Serialize with a varint length prefix</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.PingCommand.Serialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.PingCommand)">
            <summary>Serialize the instance into the stream</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.PingCommand.SerializeLengthDelimited(System.IO.Stream,Com.Gamesparks.Realtime.Proto.PingCommand)">
            <summary>Helper: Serialize with a varint length prefix</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.LoginResult.Deserialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.LoginResult)">
            <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.PingResult.Deserialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.PingResult)">
            <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.PlayerConnectMessage.Deserialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.PlayerConnectMessage)">
            <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.PlayerDisconnectMessage.Deserialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.PlayerDisconnectMessage)">
            <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.UDPConnectMessage.Deserialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.UDPConnectMessage)">
            <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.UDPConnectMessage.Serialize(System.IO.Stream,Com.Gamesparks.Realtime.Proto.UDPConnectMessage)">
            <summary>Serialize the instance into the stream</summary>
        </member>
        <member name="M:Com.Gamesparks.Realtime.Proto.UDPConnectMessage.SerializeLengthDelimited(System.IO.Stream,Com.Gamesparks.Realtime.Proto.UDPConnectMessage)">
            <summary>Helper: Serialize with a varint length prefix</summary>
        </member>
        <member name="T:GameSparks.RT.GameSparksRT">
            <summary>
            Main entry point for the GameSparksRT SDK
            </summary>
        </member>
        <member name="M:GameSparks.RT.GameSparksRT.GetSession(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get a session instance
            </summary>
            <returns>The session.</returns>
            <param name="connectToken">A Connect token as recieved from the GameSparks SDK</param>
            <param name="hostName">Host name.</param>
            <param name="tcpPort">TCP port.</param>
            <param name="udpPort">UDP port.</param>
        </member>
        <member name="M:GameSparks.RT.GameSparksRT.SetRootLogLevel(GameSparks.RT.GameSparksRT.LogLevel)">
            <summary>
            Set the default log level for logging in the SDK
            </summary>
            <param name="level">The LogLevel to set</param>
        </member>
        <member name="M:GameSparks.RT.GameSparksRT.SetLogLevel(System.String,GameSparks.RT.GameSparksRT.LogLevel)">
            <summary>
            Set the log level for a given tag.
            </summary>
            <param name="tag">The tag to set the LogLevel of</param>
            <param name="level">The LogLevel to set</param>
        </member>
        <member name="P:GameSparks.RT.GameSparksRT.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>An Action&lt;string&gt;</value>
        </member>
        <member name="T:GameSparks.RT.GameSparksRT.LogLevel">
            <summary>
            Log level.
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.LogLevel.DEBUG">
            <summary>
            Log at DEBUG
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.LogLevel.INFO">
            <summary>
            Log at INFO
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.LogLevel.WARN">
            <summary>
            Log at WARN
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.LogLevel.ERROR">
            <summary>
            Log at ERROR
            </summary>
        </member>
        <member name="T:GameSparks.RT.GameSparksRT.ConnectState">
            <summary>
            The state of the current SDK
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.ConnectState.Disconnected">
            <summary>
            Disconnected.
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.ConnectState.Connecting">
            <summary>
            Connecting.
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.ConnectState.ReliableOnly">
            <summary>
            Only a TCP connection is established.
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.ConnectState.ReliableAndFastSend">
            <summary>
            We've successfully send some UDP and the server has recieved it, but have not recieved any
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.ConnectState.ReliableAndFast">
            <summary>
            All systems go. We can send and recieve UCP.
            </summary>
        </member>
        <member name="T:GameSparks.RT.GameSparksRT.DeliveryIntent">
            <summary>
            How the message should be attempted to be sent.
            If ConnectState==ReliableOnly the message will be sent as RELIABLE
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.DeliveryIntent.RELIABLE">
            <summary>
            Send over TCP
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.DeliveryIntent.UNRELIABLE">
            <summary>
            Send over UDP, don't discard out of sequence packets
            </summary>
        </member>
        <member name="F:GameSparks.RT.GameSparksRT.DeliveryIntent.UNRELIABLE_SEQUENCED">
            <summary>
            Send over UDP, discard out of sequence packets
            </summary>
        </member>
        <member name="T:GameSparks.RT.IRTSession">
            <summary>
            The realtime session interface. An instance if this interface can be obtainedfrom RTSessionFactory
            Each realtime session will have a single instance of this interface.
            </summary>
        </member>
        <member name="M:GameSparks.RT.IRTSession.Start">
            <summary>
            Starts the session and connects to the real time services.
            </summary>
        </member>
        <member name="M:GameSparks.RT.IRTSession.Stop">
            <summary>
            Starts the session and disconnects from the real time services.
            </summary>
        </member>
        <member name="M:GameSparks.RT.IRTSession.SendData(System.Int32,GameSparks.RT.GameSparksRT.DeliveryIntent,System.Byte[],GameSparks.RT.RTData,System.Int32[])">
            <summary>
            Sends a message to other players
            </summary>
            <param name="opCode">The opCode to send</param>
            <param name="deliveryIntent">How this message should be sent.</param>
            <param name="payload">the byte array to send</param>
            <param name="data">The RTData object to send</param>
            <param name="targetPlayers">The list of players to send to (empty to send to all)</param>
        </member>
        <member name="M:GameSparks.RT.IRTSession.SendRTData(System.Int32,GameSparks.RT.GameSparksRT.DeliveryIntent,GameSparks.RT.RTData,System.Int32[])">
            <summary>
            Sends a strucured message to other players
            </summary>
            <param name="opCode">The opCode to send</param>
            <param name="deliveryIntent">How this message should be sent.</param>
            <param name="data">The RTData object to send</param>
            <param name="targetPlayers">The list of players to send to (empty to send to all)</param>
        </member>
        <member name="M:GameSparks.RT.IRTSession.SendBytes(System.Int32,GameSparks.RT.GameSparksRT.DeliveryIntent,System.ArraySegment{System.Byte},System.Int32[])">
            <summary>
            Sends a byte[] to other players
            </summary>
            <param name="opCode">The opCode to send</param>
            <param name="deliveryIntent">How this message should be sent.</param>
            <param name="payload">bytes to send, as an ArraySegment<c> struct</c></param>
            <param name="targetPlayers">The list of players to send to (empty to send to all)</param>
        </member>
        <member name="M:GameSparks.RT.IRTSession.SendRTDataAndBytes(System.Int32,GameSparks.RT.GameSparksRT.DeliveryIntent,System.Nullable{System.ArraySegment{System.Byte}},GameSparks.RT.RTData,System.Int32[])">
            <summary>
            Sends both RTData and bytes to other players
            </summary>
            <param name="opCode">The opCode to send</param>
            <param name="deliveryIntent">How this message should be sent.</param>
            <param name="payload">bytes to send, as an ArraySegment<c> struct</c></param>
            <param name="targetPlayers">The list of players to send to (empty to send to all)</param>
        </member>
        <member name="M:GameSparks.RT.IRTSession.Update">
            <summary>
            This method should be called as frequently as possible by the thread you want
            Your callbacks to execute on. In unity, you should call this from an Update 
            method in a MonoBehaviour
            </summary>
        </member>
        <member name="P:GameSparks.RT.IRTSession.SessionListener">
            <summary>
            The user supplied session listener.
            </summary>
        </member>
        <member name="P:GameSparks.RT.IRTSession.PeerId">
            <summary>
            The peerId of the current player.
            </summary>
        </member>
        <member name="P:GameSparks.RT.IRTSession.Ready">
            <summary>
            Indicates if the SDK is Ready and connected
            </summary>
        </member>
        <member name="P:GameSparks.RT.IRTSession.ActivePeers">
            <summary>
            The list of peers who are currently connected.
            </summary>
        </member>
        <member name="P:GameSparks.RT.IRTSession.ConnectState">
            <summary>
            The connection state of the session.
            </summary>
        </member>
        <member name="M:GameSparks.RT.IRTSessionListener.OnPlayerConnect(System.Int32)">
            <summary>
            Executed when another player joins the room.
            </summary>
            <param name="peerId">The player who has just joined</param>
        </member>
        <member name="M:GameSparks.RT.IRTSessionListener.OnPlayerDisconnect(System.Int32)">
            <summary>
            Executed when another player leaves the room.
            </summary>
            <param name="peerId">The player who has just left</param>
        </member>
        <member name="M:GameSparks.RT.IRTSessionListener.OnReady(System.Boolean)">
            <summary>
            Executed when the SDK moves between a ready and non ready state
            </summary>
            <param name="ready">Whether the SDK is in a ready state (or not)</param>
        </member>
        <member name="M:GameSparks.RT.IRTSessionListener.OnPacket(GameSparks.RT.RTPacket)">
            <summary>
            Executed when the SDK recieves a message from another player via SendPacket
            </summary>
            <param name="opCode">The opCode sent by the other player</param>
            <param name="sender">The peerId of the other player</param>
            <param name="stream">The stream of bytes sent by the other player</param>
            <param name="length">The number of bytes in the stream that can be read</param>
        </member>
        <member name="M:GameSparks.RT.Pools.ObjectPool`1.Pop">
            <summary>
            The returned stream is not reset.
            You must call .SetLength(0) before using it.
            This is done in the generated code.
            </summary>
        </member>
        <member name="T:GameSparks.RT.PositionStream">
            <summary>
            Wrapper for streams that does not support the Position property.
            Adds support for the Position property.
            </summary>
        </member>
        <member name="M:GameSparks.RT.PositionStream.Wrap(System.IO.Stream)">
            <summary>
            Define how many bytes are allowed to read
            </summary>
            <param name='baseStream'>
            Base stream.
            </param>
            <param name='maxLength'>
            Max length allowed to read from the stream.
            </param>
        </member>
        <member name="P:GameSparks.RT.PositionStream.BytesRead">
            <summary>
            Bytes left to read
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.Packet.DeserializeLengthDelimited(System.IO.Stream,System.IO.BinaryReader,GameSparks.RT.Proto.Packet)">
            <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        </member>
        <member name="M:GameSparks.RT.Proto.Packet.Serialize(System.IO.Stream,GameSparks.RT.Proto.Packet)">
            <summary>Serialize the instance into the stream</summary>
        </member>
        <member name="M:GameSparks.RT.Proto.Packet.SerializeLengthDelimited(System.IO.Stream,GameSparks.RT.Proto.Packet)">
            <summary>Helper: Serialize with a varint length prefix</summary>
        </member>
        <member name="M:GameSparks.RT.Proto.RTVal.SerializeLengthDelimited(System.IO.Stream)">
            <summary>Helper: Serialize with a varint length prefix</summary>
        </member>
        <member name="T:GameSparks.RT.Proto.ProtocolBufferException">
            <summary>>
             This exception is thrown when badly formatted protocol buffer data is read.
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.SkipKey(System.IO.Stream,GameSparks.RT.Proto.Key)">
            <summary>
            Seek past the value for the previously read key.
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>
            Writes length delimited byte array
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.WriteBytes(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Writes length delimited byte array
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.ReadSkipVarInt(System.IO.Stream)">
            <summary>
            Reads past a varint for an unknown field.
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.ReadZInt32(System.IO.Stream)">
            <summary>
            Zig-zag signed VarInt format
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.WriteZInt32(System.IO.Stream,System.Int32)">
            <summary>
            Zig-zag signed VarInt format
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.ReadUInt32(System.IO.Stream)">
            <summary>
            Unsigned VarInt format
            Do not use to read int32, use ReadUint64 for that.
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.WriteUInt32(System.IO.Stream,System.UInt32)">
            <summary>
            Unsigned VarInt format
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.ReadZInt64(System.IO.Stream)">
            <summary>
            Zig-zag signed VarInt format
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.WriteZInt64(System.IO.Stream,System.Int64)">
            <summary>
            Zig-zag signed VarInt format
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.ReadUInt64(System.IO.Stream)">
            <summary>
            Unsigned VarInt format
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.ProtocolParser.WriteUInt64(System.IO.Stream,System.UInt64)">
            <summary>
            Unsigned VarInt format
            </summary>
        </member>
        <member name="M:GameSparks.RT.Proto.RTValSerializer.WriteRTVal(System.IO.Stream,GameSparks.RT.Proto.RTVal)">
            <summary>Helper: Serialize with a varint length prefix</summary>
        </member>
    </members>
</doc>
